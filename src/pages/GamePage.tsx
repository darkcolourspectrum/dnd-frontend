import React, { useEffect, useState, useRef } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { getSessionById } from "../api/gameSessions";
import { GameSession } from "../types/gameTypes";
import { GameWebSocket, connectWebSocket, disconnectWebSocket } from "../api/websocket";

interface PlayerPosition {
  x: number;
  y: number;
}

interface GameState {
  currentTurn: number | null;
  players: Record<number, PlayerPosition>;
  turnNumber: number;
  isMyTurn: boolean;
  diceResult: any | null;
  systemMessages: string[];
  connectionStatus: 'connecting' | 'connected' | 'disconnected' | 'failed';
}

const GamePage = () => {
  const { sessionId } = useParams();
  const { token, userId } = useAuth();
  const navigate = useNavigate();
  
  const [session, setSession] = useState<GameSession | null>(null);
  const [gameState, setGameState] = useState<GameState>({
    currentTurn: null,
    players: {},
    turnNumber: 0,
    isMyTurn: false,
    diceResult: null,
    systemMessages: [],
    connectionStatus: 'connecting'
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedCell, setSelectedCell] = useState<{x: number, y: number} | null>(null);
  const [diceFormula, setDiceFormula] = useState('d20');
  
  const wsRef = useRef<GameWebSocket | null>(null);

  // –†–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  const GRID_SIZE = 40;
  const BOARD_WIDTH = 20;
  const BOARD_HEIGHT = 15;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–¢–û–õ–¨–ö–û –î–õ–Ø –ù–ï-GM)
  useEffect(() => {
    if (userId && !gameState.players[userId] && session) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å GM
      const isGM = session.players?.find(p => p.user_id === userId)?.is_gm;
      
      if (!isGM) {
        // –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–∞ –ø–æ–ª–µ
        const randomX = Math.floor(Math.random() * BOARD_WIDTH);
        const randomY = Math.floor(Math.random() * BOARD_HEIGHT);
        
        setGameState(prev => ({
          ...prev,
          players: {
            ...prev.players,
            [userId]: { x: randomX, y: randomY }
          }
        }));
      }
    }
  }, [userId, gameState.players, session]);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
  useEffect(() => {
    if (!sessionId || !token) return;

    const initWebSocket = async () => {
      try {
        setGameState(prev => ({ ...prev, connectionStatus: 'connecting' }));
        
        const ws = connectWebSocket(sessionId, token);
        wsRef.current = ws;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        ws.on('*', handleWebSocketMessage);
        ws.on('connection_failed', () => {
          setGameState(prev => ({ ...prev, connectionStatus: 'failed' }));
          addSystemMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        });

        await ws.connect();
        setGameState(prev => ({ ...prev, connectionStatus: 'connected' }));
        addSystemMessage('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
      } catch (error) {
        console.error('WebSocket connection error:', error);
        setGameState(prev => ({ ...prev, connectionStatus: 'failed' }));
        addSystemMessage('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      }
    };

    initWebSocket();

    return () => {
      if (sessionId) {
        disconnectWebSocket(sessionId);
      }
    };
  }, [sessionId, token]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    const loadSession = async () => {
      if (!sessionId || !token) return;
      
      try {
        const sessionData = await getSessionById(sessionId, token);
        if (!sessionData) {
          setError('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return;
        }
        setSession(sessionData);
        addSystemMessage(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è: ${sessionData.id}`);
      } catch (err) {
        console.error('Session loading error:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏');
      } finally {
        setLoading(false);
      }
    };

    loadSession();
  }, [sessionId, token]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
  const handleWebSocketMessage = (data: any) => {
    console.log('WebSocket message received:', data);
    
    switch (data.type) {
      case 'initial_state':
        if (data.data?.players) {
          const playersMap: Record<number, PlayerPosition> = {};
          data.data.players.forEach((player: any) => {
            playersMap[player.user_id] = player.position || { x: 0, y: 0 };
          });
          setGameState(prev => ({
            ...prev,
            players: { ...prev.players, ...playersMap }
          }));
          addSystemMessage('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        }
        break;

      case 'player_moved':
        if (data.data?.user_id && data.data?.position) {
          setGameState(prev => ({
            ...prev,
            players: {
              ...prev.players,
              [data.data.user_id]: data.data.position
            }
          }));
          const playerName = data.data.user_id === userId ? '–í—ã' : `–ò–≥—Ä–æ–∫ ${data.data.user_id}`;
          addSystemMessage(`${playerName} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ (${data.data.position.x}, ${data.data.position.y})`);
        }
        break;

      case 'turn_ended':
        if (data.data) {
          setGameState(prev => ({
            ...prev,
            currentTurn: data.data.next_player_id,
            turnNumber: data.data.turn_number || prev.turnNumber + 1,
            isMyTurn: data.data.next_player_id === userId
          }));
          
          const currentPlayerName = data.data.current_player_id === userId ? '–í—ã' : `–ò–≥—Ä–æ–∫ ${data.data.current_player_id}`;
          const nextPlayerName = data.data.next_player_id === userId ? '–í—ã' : `–ò–≥—Ä–æ–∫ ${data.data.next_player_id}`;
          addSystemMessage(`${currentPlayerName} –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ö–æ–¥. –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: ${nextPlayerName}`);
        }
        break;

      case 'dice_rolled':
        if (data.data?.result) {
          setGameState(prev => ({ ...prev, diceResult: data.data.result }));
          const playerName = data.data.user_id === userId ? '–í—ã' : `–ò–≥—Ä–æ–∫ ${data.data.user_id}`;
          const rolls = data.data.result.rolls ? ` [${data.data.result.rolls.join(', ')}]` : '';
          addSystemMessage(`üé≤ ${playerName} –±—Ä–æ—Å–∏–ª–∏ ${data.data.formula}: ${data.data.result.total}${rolls}`);
        }
        break;

      case 'game_started':
        addSystemMessage('üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
        if (data.data?.turn_info) {
          setGameState(prev => ({
            ...prev,
            currentTurn: data.data.turn_info.current_player_id,
            isMyTurn: data.data.turn_info.current_player_id === userId,
            turnNumber: 1
          }));
          const firstPlayerName = data.data.turn_info.current_player_id === userId ? '–í—ã' : `–ò–≥—Ä–æ–∫ ${data.data.turn_info.current_player_id}`;
          addSystemMessage(`–ü–µ—Ä–≤—ã–π —Ö–æ–¥: ${firstPlayerName}`);
        }
        break;

      case 'player_connected':
        if (data.data?.user_id) {
          const playerName = data.data.user_id === userId ? '–í—ã' : `–ò–≥—Ä–æ–∫ ${data.data.user_id}`;
          addSystemMessage(`üëã ${playerName} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ`);
        }
        break;

      case 'player_disconnected':
        if (data.data?.user_id) {
          const playerName = data.data.user_id === userId ? '–í—ã' : `–ò–≥—Ä–æ–∫ ${data.data.user_id}`;
          addSystemMessage(`üëã ${playerName} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∏–≥—Ä—ã`);
        }
        break;

      case 'dice_error':
        if (data.data?.error) {
          addSystemMessage(`‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞: ${data.data.error}`);
        }
        break;

      default:
        console.log('Unhandled WebSocket message type:', data.type);
        break;
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const addSystemMessage = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setGameState(prev => ({
      ...prev,
      systemMessages: [...prev.systemMessages, `${timestamp}: ${message}`].slice(-15) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 15 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    }));
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  const handleCellClick = (x: number, y: number) => {
    if (!gameState.isMyTurn) {
      addSystemMessage('‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
      return;
    }

    if (!wsRef.current?.isConnected()) {
      addSystemMessage('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–∞–ª—å–Ω–æ—Å—Ç–∏)
    const currentPos = gameState.players[userId!];
    if (currentPos) {
      const distance = Math.abs(x - currentPos.x) + Math.abs(y - currentPos.y);
      if (distance > 3) { // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞
        addSystemMessage('‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞: 3 –∫–ª–µ—Ç–∫–∏');
        return;
      }
    }

    const message = {
      type: 'move',
      data: {
        position: { x, y }
      }
    };

    wsRef.current.send(message);
    setSelectedCell({ x, y });
    addSystemMessage(`üö∂ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É (${x}, ${y})...`);
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
  const handleEndTurn = () => {
    if (!gameState.isMyTurn) {
      addSystemMessage('‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
      return;
    }

    if (!wsRef.current?.isConnected()) {
      addSystemMessage('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    const message = {
      type: 'end_turn',
      data: {}
    };

    wsRef.current.send(message);
    addSystemMessage('‚è≠Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞...');
  };

  // –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π
  const handleDiceRoll = () => {
    if (!wsRef.current?.isConnected()) {
      addSystemMessage('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    const message = {
      type: 'roll_dice',
      data: {
        dice_formula: diceFormula
      }
    };

    wsRef.current.send(message);
    addSystemMessage(`üé≤ –ë—Ä–æ—Å–æ–∫ ${diceFormula}...`);
  };

  // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const getConnectionStatusColor = () => {
    switch (gameState.connectionStatus) {
      case 'connected': return '#56ab2f';
      case 'connecting': return '#ffd700';
      case 'disconnected': return '#ff6b6b';
      case 'failed': return '#ff4444';
      default: return '#666';
    }
  };

  const getConnectionStatusText = () => {
    switch (gameState.connectionStatus) {
      case 'connected': return 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case 'connecting': return 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case 'disconnected': return 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ';
      case 'failed': return '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      default: return '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        background: 'linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)',
        color: '#fff',
        fontSize: '1.2rem'
      }}>
        üé≤ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ 
        display: 'flex', 
        flexDirection: 'column',
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        background: 'linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)',
        color: '#fff',
        gap: '20px'
      }}>
        <div style={{ fontSize: '1.5rem', color: '#ff6b6b' }}>
          ‚ùå {error}
        </div>
        <button 
          onClick={() => navigate('/')}
          className="btn btn-primary"
        >
          –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å GM
  const isGM = session?.players?.find(p => p.user_id === userId)?.is_gm;
  const actualPlayers = Object.fromEntries(
    Object.entries(gameState.players).filter(([playerId]) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è GM
      const player = session?.players?.find(p => p.user_id === parseInt(playerId));
      return !player?.is_gm;
    })
  );

  return (
    <div style={{
      display: 'flex',
      height: '100vh',
      background: 'linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)',
      color: '#fff'
    }}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div style={{ flex: 1, padding: '20px', overflow: 'auto' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
        <div style={{ marginBottom: '20px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
            <h2>üéÆ –°–µ—Å—Å–∏—è: {session?.id}</h2>
            <div style={{ 
              color: getConnectionStatusColor(),
              fontWeight: 'bold',
              fontSize: '0.9rem'
            }}>
              {getConnectionStatusText()}
            </div>
          </div>
          
          <div style={{ display: 'flex', gap: '20px', alignItems: 'center', flexWrap: 'wrap' }}>
            <span style={{ 
              fontSize: '1.1rem',
              color: '#ffd700',
              fontWeight: 'bold'
            }}>
              –•–æ–¥ #{gameState.turnNumber}
            </span>
            <span style={{ 
              fontSize: '1.1rem',
              color: gameState.isMyTurn ? '#56ab2f' : '#ff6b6b',
              fontWeight: 'bold',
              padding: '5px 12px',
              borderRadius: '20px',
              background: gameState.isMyTurn ? 'rgba(86, 171, 47, 0.2)' : 'rgba(255, 107, 107, 0.2)'
            }}>
              {gameState.isMyTurn ? 'üü¢ –í–ê–® –•–û–î' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'}
            </span>
            {gameState.currentTurn && (
              <span style={{ color: 'rgba(255, 255, 255, 0.8)' }}>
                –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: {gameState.currentTurn === userId ? '–í—ã' : gameState.currentTurn}
              </span>
            )}
          </div>
        </div>

        {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 255, 255, 0.1)',
          padding: '20px',
          borderRadius: '12px',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          marginBottom: '20px'
        }}>
          <div style={{
            display: 'grid',
            gridTemplateColumns: `repeat(${BOARD_WIDTH}, ${GRID_SIZE}px)`,
            gridTemplateRows: `repeat(${BOARD_HEIGHT}, ${GRID_SIZE}px)`,
            gap: '1px',
            background: '#333',
            border: '2px solid #555'
          }}>
            {Array.from({ length: BOARD_HEIGHT }, (_, y) =>
              Array.from({ length: BOARD_WIDTH }, (_, x) => {
                const playersHere = Object.entries(actualPlayers).filter(
                  ([_, pos]) => pos.x === x && pos.y === y
                );
                const isSelected = selectedCell?.x === x && selectedCell?.y === y;
                const isMyPosition = gameState.players[userId!]?.x === x && gameState.players[userId!]?.y === y;
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
                const currentPos = gameState.players[userId!];
                const isValidMove = currentPos ? 
                  (Math.abs(x - currentPos.x) + Math.abs(y - currentPos.y)) <= 3 : true;
                
                return (
                  <div
                    key={`${x}-${y}`}
                    onClick={() => handleCellClick(x, y)}
                    style={{
                      width: `${GRID_SIZE}px`,
                      height: `${GRID_SIZE}px`,
                      background: isSelected 
                        ? '#4facfe'
                        : isMyPosition
                        ? '#56ab2f'
                        : playersHere.length > 0
                        ? '#ff6b6b' 
                        : gameState.isMyTurn && isValidMove
                        ? '#fff'
                        : '#ddd',
                      cursor: gameState.isMyTurn && isValidMove ? 'pointer' : 'default',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '16px',
                      transition: 'all 0.2s ease',
                      position: 'relative',
                      opacity: (!gameState.isMyTurn || isValidMove) ? 1 : 0.5
                    }}
                    title={
                      playersHere.length > 0 
                        ? `–ò–≥—Ä–æ–∫–∏: ${playersHere.map(([id]) => id === userId?.toString() ? '–í—ã' : id).join(', ')}` 
                        : `–ö–ª–µ—Ç–∫–∞ (${x}, ${y})`
                    }
                  >
                    {playersHere.map(([playerId], index) => (
                      <span key={playerId} style={{
                        position: 'absolute',
                        top: `${2 + index * 6}px`,
                        left: `${2 + index * 6}px`,
                        fontSize: '18px'
                      }}>
                        {playerId === userId?.toString() ? 'üë§' : 'üßô'}
                      </span>
                    ))}
                  </div>
                );
              })
            )}
          </div>
          <div style={{ 
            marginTop: '10px', 
            fontSize: '0.9rem', 
            color: 'rgba(255, 255, 255, 0.7)',
            textAlign: 'center'
          }}>
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞: 3 –∫–ª–µ—Ç–∫–∏ | üë§ - –í—ã | üßô - –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏
          </div>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div style={{
          background: 'rgba(255, 255, 255, 0.1)',
          padding: '20px',
          borderRadius: '12px',
          border: '1px solid rgba(255, 255, 255, 0.2)'
        }}>
          {isGM ? (
            // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è GM
            <>
              <h3 style={{ marginBottom: '15px', color: '#ffd700' }}>üëë –ü–∞–Ω–µ–ª—å Game Master</h3>
              <div style={{ display: 'flex', gap: '15px', flexWrap: 'wrap', alignItems: 'center' }}>
                {/* –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π –æ—Ç –∏–º–µ–Ω–∏ —Å–∏—Å—Ç–µ–º—ã */}
                <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
                  <label style={{ color: '#ffd700', fontWeight: 'bold' }}>üé≤ –°–∏—Å—Ç–µ–º–Ω—ã–π –±—Ä–æ—Å–æ–∫:</label>
                  <select
                    value={diceFormula}
                    onChange={(e) => setDiceFormula(e.target.value)}
                    className="form-select"
                    style={{ minWidth: '100px' }}
                  >
                    <option value="d4">d4</option>
                    <option value="d6">d6</option>
                    <option value="d8">d8</option>
                    <option value="d10">d10</option>
                    <option value="d12">d12</option>
                    <option value="d20">d20</option>
                    <option value="d100">d100</option>
                    <option value="2d6">2d6</option>
                    <option value="3d6">3d6</option>
                    <option value="1d20+5">d20+5</option>
                  </select>
                  <button
                    onClick={handleDiceRoll}
                    className="btn btn-success"
                    disabled={gameState.connectionStatus !== 'connected'}
                  >
                    üé≤ –ë—Ä–æ—Å–∏—Ç—å
                  </button>
                </div>

                {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞–º–∏ */}
                <button
                  onClick={() => {
                    // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
                    if (wsRef.current?.isConnected()) {
                      const message = {
                        type: 'gm_command',
                        data: {
                          action: 'force_end_turn',
                          current_player: gameState.currentTurn
                        }
                      };
                      wsRef.current.send(message);
                      addSystemMessage('GM –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–¥');
                    }
                  }}
                  className="btn"
                  style={{ background: 'linear-gradient(45deg, #ff6b6b, #ee5a52)' }}
                  disabled={!gameState.currentTurn || gameState.connectionStatus !== 'connected'}
                >
                  ‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
                </button>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞ */}
                {gameState.diceResult && (
                  <div style={{
                    padding: '10px 15px',
                    background: 'rgba(255, 215, 0, 0.2)',
                    borderRadius: '8px',
                    border: '1px solid #ffd700',
                    fontWeight: 'bold'
                  }}>
                    üé≤ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫: {gameState.diceResult.total}
                    {gameState.diceResult.rolls && (
                      <span style={{ fontSize: '0.9rem', marginLeft: '10px', opacity: 0.8 }}>
                        ({gameState.diceResult.rolls.join(' + ')})
                      </span>
                    )}
                  </div>
                )}
              </div>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è GM */}
              <div style={{
                marginTop: '20px',
                padding: '15px',
                background: 'rgba(255, 215, 0, 0.1)',
                borderRadius: '8px',
                border: '1px solid rgba(255, 215, 0, 0.3)'
              }}>
                <h4 style={{ color: '#ffd700', marginBottom: '10px', fontSize: '1rem' }}>
                  üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è GM:
                </h4>
                <ul style={{ 
                  margin: 0,
                  paddingLeft: '20px',
                  color: 'rgba(255, 255, 255, 0.8)',
                  fontSize: '0.9rem'
                }}>
                  <li>–ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ</li>
                  <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±—Ä–æ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è</li>
                  <li>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–π—Ç–µ —Ö–æ–¥—ã, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–æ–ª–≥–æ –¥—É–º–∞–µ—Ç</li>
                  <li>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏–≥—Ä—ã –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏</li>
                </ul>
              </div>
            </>
          ) : (
            // –û–±—ã—á–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            <>
              <h3 style={{ marginBottom: '15px' }}>üéØ –î–µ–π—Å—Ç–≤–∏—è</h3>
              <div style={{ display: 'flex', gap: '15px', flexWrap: 'wrap', alignItems: 'center' }}>
                {/* –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π */}
                <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
                  <label style={{ color: '#ffd700', fontWeight: 'bold' }}>–ö–æ—Å—Ç–∏:</label>
                  <select
                    value={diceFormula}
                    onChange={(e) => setDiceFormula(e.target.value)}
                    className="form-select"
                    style={{ minWidth: '100px' }}
                  >
                    <option value="d4">d4</option>
                    <option value="d6">d6</option>
                    <option value="d8">d8</option>
                    <option value="d10">d10</option>
                    <option value="d12">d12</option>
                    <option value="d20">d20</option>
                    <option value="d100">d100</option>
                    <option value="2d6">2d6</option>
                    <option value="3d6">3d6</option>
                    <option value="1d20+5">d20+5</option>
                  </select>
                  <button
                    onClick={handleDiceRoll}
                    className="btn btn-success"
                    disabled={gameState.connectionStatus !== 'connected'}
                  >
                    üé≤ –ë—Ä–æ—Å–∏—Ç—å
                  </button>
                </div>

                {/* –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ */}
                <button
                  onClick={handleEndTurn}
                  disabled={!gameState.isMyTurn || gameState.connectionStatus !== 'connected'}
                  className={`btn ${gameState.isMyTurn ? '' : 'btn-disabled'}`}
                  style={{ 
                    background: gameState.isMyTurn && gameState.connectionStatus === 'connected'
                      ? 'linear-gradient(45deg, #ff6b6b, #ee5a52)' 
                      : '#666'
                  }}
                >
                  ‚è≠Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
                </button>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞ */}
                {gameState.diceResult && (
                  <div style={{
                    padding: '10px 15px',
                    background: 'rgba(255, 215, 0, 0.2)',
                    borderRadius: '8px',
                    border: '1px solid #ffd700',
                    fontWeight: 'bold'
                  }}>
                    üé≤ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫: {gameState.diceResult.total}
                    {gameState.diceResult.rolls && (
                      <span style={{ fontSize: '0.9rem', marginLeft: '10px', opacity: 0.8 }}>
                        ({gameState.diceResult.rolls.join(' + ')})
                      </span>
                    )}
                  </div>
                )}
              </div>
            </>
          )}
        </div>
      </div>

      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <div style={{
        width: '300px',
        background: 'rgba(255, 255, 255, 0.1)',
        borderLeft: '1px solid rgba(255, 255, 255, 0.2)',
        display: 'flex',
        flexDirection: 'column',
        padding: '20px'
      }}>
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö */}
        <div style={{ marginBottom: '20px' }}>
          <h3 style={{ marginBottom: '15px', color: '#ffd700' }}>üë• –ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω</h3>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
            {Object.keys(actualPlayers).length === 0 ? (
              <div style={{ 
                color: 'rgba(255, 255, 255, 0.7)',
                textAlign: 'center',
                padding: '20px',
                border: '1px dashed rgba(255, 255, 255, 0.3)',
                borderRadius: '8px'
              }}>
                {isGM ? '–í—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ –∑–∞ –∏–≥—Ä–æ–∫–∞–º–∏ –∫–∞–∫ GM' : '–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...'}
              </div>
            ) : (
              Object.entries(actualPlayers).map(([playerId, position]) => (
                <div 
                  key={playerId}
                  style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    padding: '12px',
                    background: playerId === userId?.toString() 
                      ? 'rgba(79, 172, 254, 0.2)' 
                      : gameState.currentTurn?.toString() === playerId
                      ? 'rgba(255, 215, 0, 0.2)'
                      : 'rgba(255, 255, 255, 0.1)',
                    borderRadius: '8px',
                    border: `1px solid ${
                      playerId === userId?.toString() 
                        ? '#4facfe' 
                        : gameState.currentTurn?.toString() === playerId
                        ? '#ffd700'
                        : 'rgba(255, 255, 255, 0.2)'
                    }`
                  }}
                >
                  <div>
                    <div style={{ 
                      fontWeight: 'bold',
                      color: playerId === userId?.toString() ? '#4facfe' : '#fff',
                      marginBottom: '2px'
                    }}>
                      {playerId === userId?.toString() ? 'üë§ –í—ã' : `üßô –ò–≥—Ä–æ–∫ ${playerId}`}
                    </div>
                    <div style={{ 
                      fontSize: '0.8rem', 
                      color: 'rgba(255, 255, 255, 0.7)'
                    }}>
                      –ü–æ–∑–∏—Ü–∏—è: ({position.x}, {position.y})
                    </div>
                  </div>
                  {gameState.currentTurn?.toString() === playerId && (
                    <div style={{ 
                      fontSize: '0.8rem',
                      color: '#ffd700',
                      fontWeight: 'bold'
                    }}>
                      ‚ö° –•–û–î
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
        </div>

        {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <div style={{ flex: 1 }}>
          <h3 style={{ marginBottom: '15px', color: '#ffd700' }}>üìã –°–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã</h3>
          <div style={{
            background: 'rgba(0, 0, 0, 0.3)',
            borderRadius: '8px',
            padding: '15px',
            height: '300px',
            overflowY: 'auto',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            {gameState.systemMessages.length === 0 ? (
              <div style={{ 
                color: 'rgba(255, 255, 255, 0.5)',
                textAlign: 'center',
                padding: '40px 0'
              }}>
                –°–æ–±—ã—Ç–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...
              </div>
            ) : (
              gameState.systemMessages.map((message, index) => (
                <div 
                  key={index}
                  style={{
                    marginBottom: '8px',
                    padding: '8px 10px',
                    background: 'rgba(255, 255, 255, 0.1)',
                    borderRadius: '6px',
                    fontSize: '0.85rem',
                    lineHeight: '1.4',
                    borderLeft: '3px solid #4facfe'
                  }}
                >
                  {message}
                </div>
              ))
            )}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div style={{ marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }}>
          <button
            onClick={() => navigate(`/lobby/${sessionId}`)}
            className="btn btn-secondary"
          >
            üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
          </button>
          <button
            onClick={() => navigate('/')}
            className="btn btn-primary"
          >
            üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    </div>
  );
};

export default GamePage;