import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { login, register } from '../api/auth';
import { useAuth } from '../contexts/AuthContext';

const AuthPage = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const navigate = useNavigate();
  const { login: authLogin } = useAuth();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
  const [loginData, setLoginData] = useState({
    email: '',
    password: ''
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const [registerData, setRegisterData] = useState({
    nickname: '',
    email: '',
    password: '',
    confirmPassword: ''
  });

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!loginData.email || !loginData.password) {
      setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    try {
      setIsSubmitting(true);
      setError('');
      
      const response = await login(loginData.email, loginData.password, 'device-fingerprint');
      const { access_token } = response;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/auth/me`, {
        headers: { Authorization: `Bearer ${access_token}` }
      });
      const userData = await userResponse.json();
      
      authLogin(access_token, userData.id);
      navigate('/');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!registerData.nickname || !registerData.email || !registerData.password) {
      setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    if (registerData.password !== registerData.confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    if (registerData.password.length < 8) {
      setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    try {
      setIsSubmitting(true);
      setError('');
      
      await register(registerData.nickname, registerData.email, registerData.password);
      setIsLogin(true);
      setError('');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setError(''); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
      alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∑–∞–Ω—è—Ç.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="page-container">
      <div className="content-wrapper">
        <div className="card card-medium">
          <div style={{ textAlign: 'center', marginBottom: '30px' }}>
            <h1 style={{ fontSize: '2.5rem', marginBottom: '10px' }}>
              üé≤ DnD Multiplayer
            </h1>
            <p style={{ 
              color: 'rgba(255, 255, 255, 0.8)',
              fontSize: '1.1rem'
            }}>
              {isLogin ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!' : '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é!'}
            </p>
          </div>

          {error && (
            <div className="error-message">
              {error}
            </div>
          )}

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –≤—Ö–æ–¥–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π */}
          <div style={{ 
            display: 'flex', 
            marginBottom: '30px',
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '12px',
            padding: '5px'
          }}>
            <button
              type="button"
              onClick={() => {
                setIsLogin(true);
                setError('');
              }}
              style={{
                flex: 1,
                padding: '12px',
                border: 'none',
                borderRadius: '8px',
                background: isLogin ? 'rgba(79, 172, 254, 0.3)' : 'transparent',
                color: isLogin ? '#4facfe' : 'rgba(255, 255, 255, 0.7)',
                fontWeight: isLogin ? 'bold' : 'normal',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
            >
              –í—Ö–æ–¥
            </button>
            <button
              type="button"
              onClick={() => {
                setIsLogin(false);
                setError('');
              }}
              style={{
                flex: 1,
                padding: '12px',
                border: 'none',
                borderRadius: '8px',
                background: !isLogin ? 'rgba(86, 171, 47, 0.3)' : 'transparent',
                color: !isLogin ? '#56ab2f' : 'rgba(255, 255, 255, 0.7)',
                fontWeight: !isLogin ? 'bold' : 'normal',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
            >
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </button>
          </div>

          {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
          {isLogin ? (
            <form onSubmit={handleLogin}>
              <div className="form-group">
                <label className="form-label">Email</label>
                <input
                  type="email"
                  className="form-input"
                  value={loginData.email}
                  onChange={(e) => setLoginData({...loginData, email: e.target.value})}
                  placeholder="your@email.com"
                  required
                />
              </div>

              <div className="form-group">
                <label className="form-label">–ü–∞—Ä–æ–ª—å</label>
                <input
                  type="password"
                  className="form-input"
                  value={loginData.password}
                  onChange={(e) => setLoginData({...loginData, password: e.target.value})}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  required
                />
              </div>

              <button 
                type="submit"
                className={`btn btn-primary btn-large ${isSubmitting ? 'btn-disabled' : ''}`}
                style={{ width: '100%', marginTop: '20px' }}
                disabled={isSubmitting}
              >
                {isSubmitting ? '‚è≥ –í—Ö–æ–¥–∏–º...' : '–í–æ–π—Ç–∏'}
              </button>
            </form>
          ) : (
            /* –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
            <form onSubmit={handleRegister}>
              <div className="form-group">
                <input
                  type="text"
                  className="form-input"
                  value={registerData.nickname}
                  onChange={(e) => setRegisterData({...registerData, nickname: e.target.value})}
                  placeholder="–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º"
                  required
                  minLength={3}
                  maxLength={50}
                />
              </div>

              <div className="form-group">
                <input
                  type="email"
                  className="form-input"
                  value={registerData.email}
                  onChange={(e) => setRegisterData({...registerData, email: e.target.value})}
                  placeholder="your@email.com"
                  required
                />
              </div>

              <div className="form-group">
                <input
                  type="password"
                  className="form-input"
                  value={registerData.password}
                  onChange={(e) => setRegisterData({...registerData, password: e.target.value})}
                  placeholder="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
                  required
                  minLength={8}
                />
              </div>

              <div className="form-group">
                <input
                  type="password"
                  className="form-input"
                  value={registerData.confirmPassword}
                  onChange={(e) => setRegisterData({...registerData, confirmPassword: e.target.value})}
                  placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  required
                />
              </div>

              <button 
                type="submit"
                className={`btn btn-success btn-large ${isSubmitting ? 'btn-disabled' : ''}`}
                style={{ width: '100%', marginTop: '20px' }}
                disabled={isSubmitting}
              >
                {isSubmitting ? '‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
              </button>
            </form>
          )}
        </div>
      </div>
    </div>
  );
};

export default AuthPage;