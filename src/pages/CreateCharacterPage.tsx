import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { createCharacter } from '../api/characters';
import { useAuth } from '../contexts/AuthContext';

const CreateCharacterPage: React.FC = () => {
  const navigate = useNavigate();
  const { token } = useAuth();
  
  const [formData, setFormData] = useState({
    name: '',
    race: 'human',
    class_: 'warrior',
    strength: 5,
    dexterity: 5,
    intelligence: 5
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞—Å –∏ –∫–ª–∞—Å—Å–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
  const races = {
    human: { name: '–ß–µ–ª–æ–≤–µ–∫', description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å–∞ —Å —Ö–æ—Ä–æ—à–µ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é', emoji: 'üë§' },
    elf: { name: '–≠–ª—å—Ñ', description: '–ì—Ä–∞—Ü–∏–æ–∑–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ —Å –ø—Ä–∏—Ä–æ–¥–Ω–æ–π –º–∞–≥–∏–µ–π', emoji: 'üßù' },
    dwarf: { name: '–ì–Ω–æ–º', description: '–ö—Ä–µ–ø–∫–∏–µ –≤–æ–∏–Ω—ã —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º –∫ –º–∞–≥–∏–∏', emoji: 'üßô' },
    orc: { name: '–û—Ä–∫', description: '–°–∏–ª—å–Ω—ã–µ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤—ã–µ –≤–æ–∏–Ω—ã', emoji: 'üëπ' }
  };

  const classes = {
    warrior: { name: '–í–æ–∏–Ω', description: '–ú–∞—Å—Ç–µ—Ä –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è –∏ –∑–∞—â–∏—Ç—ã', emoji: '‚öîÔ∏è' },
    mage: { name: '–ú–∞–≥', description: '–í–ª–∞–¥–µ–µ—Ç –º–æ—â–Ω–æ–π –º–∞–≥–∏–µ–π –∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏', emoji: 'üîÆ' },
    rogue: { name: '–ü–ª—É—Ç', description: '–°–∫—Ä—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞—Ä–∞–º', emoji: 'üó°Ô∏è' },
    cleric: { name: '–ñ—Ä–µ—Ü', description: '–¶–µ–ª–∏—Ç–µ–ª—å –∏ –∑–∞—â–∏—Ç–Ω–∏–∫ –æ—Ç –Ω–µ–∂–∏—Ç–∏', emoji: '‚ö°' }
  };

  const maxPoints = 15;
  const usedPoints = formData.strength + formData.dexterity + formData.intelligence;
  const remainingPoints = maxPoints - usedPoints;

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleStatChange = (stat: 'strength' | 'dexterity' | 'intelligence', value: number) => {
    const newValue = Math.max(1, Math.min(value, 10));
    const otherStats = usedPoints - formData[stat];
    
    if (otherStats + newValue <= maxPoints) {
      setFormData(prev => ({ ...prev, [stat]: newValue }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!token) return;
    
    if (usedPoints !== maxPoints) {
      setError(`–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ ${maxPoints} –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!`);
      return;
    }
    
    try {
      setIsSubmitting(true);
      setError('');
      await createCharacter(formData, token);
      navigate('/');
    } catch (error) {
      console.error('Error creating character:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="page-container">
      <div className="content-wrapper">
        <div className="card card-large">
          <h2>üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h2>
          
          {error && (
            <div className="error-message">
              {error}
            </div>
          )}
          
          <form onSubmit={handleSubmit}>
            {/* –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
            <div className="form-group">
              <label className="form-label">–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</label>
              <input
                type="text"
                className="form-input"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è"
                required
                maxLength={30}
              />
            </div>

            {/* –í—ã–±–æ—Ä —Ä–∞—Å—ã */}
            <div className="form-group">
              <label className="form-label">–†–∞—Å–∞</label>
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                gap: '10px',
                marginBottom: '10px'
              }}>
                {Object.entries(races).map(([key, race]) => (
                  <div
                    key={key}
                    onClick={() => handleInputChange('race', key)}
                    style={{
                      padding: '15px',
                      border: formData.race === key ? '2px solid #4facfe' : '2px solid rgba(255, 255, 255, 0.3)',
                      borderRadius: '8px',
                      cursor: 'pointer',
                      background: formData.race === key ? 'rgba(79, 172, 254, 0.2)' : 'rgba(255, 255, 255, 0.1)',
                      transition: 'all 0.3s ease'
                    }}
                  >
                    <div style={{ fontSize: '1.5rem', marginBottom: '5px' }}>{race.emoji}</div>
                    <div style={{ fontWeight: 'bold', color: '#ffd700' }}>{race.name}</div>
                    <div style={{ fontSize: '0.8rem', color: 'rgba(255, 255, 255, 0.7)' }}>
                      {race.description}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ */}
            <div className="form-group">
              <label className="form-label">–ö–ª–∞—Å—Å</label>
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                gap: '10px',
                marginBottom: '10px'
              }}>
                {Object.entries(classes).map(([key, cls]) => (
                  <div
                    key={key}
                    onClick={() => handleInputChange('class_', key)}
                    style={{
                      padding: '15px',
                      border: formData.class_ === key ? '2px solid #56ab2f' : '2px solid rgba(255, 255, 255, 0.3)',
                      borderRadius: '8px',
                      cursor: 'pointer',
                      background: formData.class_ === key ? 'rgba(86, 171, 47, 0.2)' : 'rgba(255, 255, 255, 0.1)',
                      transition: 'all 0.3s ease'
                    }}
                  >
                    <div style={{ fontSize: '1.5rem', marginBottom: '5px' }}>{cls.emoji}</div>
                    <div style={{ fontWeight: 'bold', color: '#ffd700' }}>{cls.name}</div>
                    <div style={{ fontSize: '0.8rem', color: 'rgba(255, 255, 255, 0.7)' }}>
                      {cls.description}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
            <div className="form-group">
              <label className="form-label">
                –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 
                <span style={{ 
                  color: remainingPoints === 0 ? '#56ab2f' : '#ffd700',
                  marginLeft: '10px'
                }}>
                  (–û—Å—Ç–∞–ª–æ—Å—å: {remainingPoints}/{maxPoints})
                </span>
              </label>
              
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
                gap: '20px'
              }}>
                {[
                  { key: 'strength', name: '–°–∏–ª–∞', emoji: 'üí™', description: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ—â—å –∏ —É—Ä–æ–Ω' },
                  { key: 'dexterity', name: '–õ–æ–≤–∫–æ—Å—Ç—å', emoji: 'üèÉ', description: '–°–∫–æ—Ä–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å' },
                  { key: 'intelligence', name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', emoji: 'üß†', description: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞ –∏ –∑–Ω–∞–Ω–∏—è' }
                ].map((stat) => (
                  <div key={stat.key} style={{
                    padding: '20px',
                    background: 'rgba(255, 255, 255, 0.1)',
                    borderRadius: '12px',
                    border: '1px solid rgba(255, 255, 255, 0.2)'
                  }}>
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      marginBottom: '10px' 
                    }}>
                      <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>{stat.emoji}</span>
                      <span style={{ fontWeight: 'bold', color: '#ffd700' }}>{stat.name}</span>
                    </div>
                    <div style={{ 
                      fontSize: '0.8rem', 
                      color: 'rgba(255, 255, 255, 0.7)',
                      marginBottom: '15px'
                    }}>
                      {stat.description}
                    </div>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                      <button
                        type="button"
                        onClick={() => handleStatChange(stat.key as any, formData[stat.key as keyof typeof formData] as number - 1)}
                        disabled={formData[stat.key as keyof typeof formData] <= 1}
                        style={{
                          background: formData[stat.key as keyof typeof formData] <= 1 ? '#666' : '#ff6b6b',
                          border: 'none',
                          borderRadius: '50%',
                          color: 'white',
                          width: '30px',
                          height: '30px',
                          cursor: formData[stat.key as keyof typeof formData] <= 1 ? 'not-allowed' : 'pointer',
                          fontSize: '1.2rem',
                          opacity: formData[stat.key as keyof typeof formData] <= 1 ? 0.6 : 1
                        }}
                      >
                        -
                      </button>
                      <span style={{ 
                        fontSize: '1.5rem', 
                        fontWeight: 'bold', 
                        minWidth: '30px', 
                        textAlign: 'center' 
                      }}>
                        {formData[stat.key as keyof typeof formData]}
                      </span>
                      <button
                        type="button"
                        onClick={() => handleStatChange(stat.key as any, formData[stat.key as keyof typeof formData] as number + 1)}
                        disabled={formData[stat.key as keyof typeof formData] >= 10 || remainingPoints <= 0}
                        style={{
                          background: (formData[stat.key as keyof typeof formData] >= 10 || remainingPoints <= 0) ? '#666' : '#56ab2f',
                          border: 'none',
                          borderRadius: '50%',
                          color: 'white',
                          width: '30px',
                          height: '30px',
                          cursor: (formData[stat.key as keyof typeof formData] >= 10 || remainingPoints <= 0) ? 'not-allowed' : 'pointer',
                          fontSize: '1.2rem',
                          opacity: (formData[stat.key as keyof typeof formData] >= 10 || remainingPoints <= 0) ? 0.6 : 1
                        }}
                      >
                        +
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div style={{ 
              display: 'flex', 
              gap: '15px', 
              justifyContent: 'center',
              marginTop: '30px'
            }}>
              <button
                type="button"
                className="btn btn-secondary"
                onClick={() => navigate('/')}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              
              <button
                type="submit"
                className={`btn btn-success btn-large ${isSubmitting || remainingPoints !== 0 ? 'btn-disabled' : ''}`}
                disabled={isSubmitting || remainingPoints !== 0}
              >
                {isSubmitting ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default CreateCharacterPage;