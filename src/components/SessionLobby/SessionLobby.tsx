import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { 
  getSessionById, 
  getSessionPlayers, 
  toggleReadyStatus,
  startSession
} from '../../api/gameSessions';
import { getCharacters } from '../../api/characters';
import { GameWebSocket, connectWebSocket, disconnectWebSocket } from '../../api/websocket';
import { GameSession, SessionPlayer, Character } from '../../types/gameTypes';
import './SessionLobby.css';

interface LobbyState {
  session: GameSession;
  players: SessionPlayer[];
  characters: Character[];
}

const SessionLobby: React.FC = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const { token, userId } = useAuth();
  const navigate = useNavigate();
  
  const [lobbyState, setLobbyState] = useState<LobbyState | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedCharacter, setSelectedCharacter] = useState<number | null>(null);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const wsRef = useRef<GameWebSocket | null>(null);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å –∏ –∫–ª–∞—Å—Å–æ–≤
  const getRaceEmoji = (race: string) => {
    const raceEmojis: { [key: string]: string } = {
      human: 'üë§',
      elf: 'üßù',
      dwarf: 'üßô',
      orc: 'üëπ'
    };
    return raceEmojis[race] || 'üë§';
  };

  const getClassEmoji = (className: string) => {
    const classEmojis: { [key: string]: string } = {
      warrior: '‚öîÔ∏è',
      mage: 'üîÆ',
      rogue: 'üó°Ô∏è',
      cleric: '‚ö°'
    };
    return classEmojis[className] || '‚öîÔ∏è';
  };

  const getRaceName = (race: string) => {
    const raceNames: { [key: string]: string } = {
      human: '–ß–µ–ª–æ–≤–µ–∫',
      elf: '–≠–ª—å—Ñ',
      dwarf: '–ì–Ω–æ–º',
      orc: '–û—Ä–∫'
    };
    return raceNames[race] || race;
  };

  const getClassName = (className: string) => {
    const classNames: { [key: string]: string } = {
      warrior: '–í–æ–∏–Ω',
      mage: '–ú–∞–≥',
      rogue: '–ü–ª—É—Ç',
      cleric: '–ñ—Ä–µ—Ü'
    };
    return classNames[className] || className;
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const validateParams = useCallback(() => {
    if (!sessionId) {
      setError('ID —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return false;
    }
    if (!token) {
      setError('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return false;
    }
    if (!userId) {
      setError('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return false;
    }
    return true;
  }, [sessionId, token, userId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadInitialData = useCallback(async () => {
    if (!validateParams()) {
      setLoading(false);
      return;
    }

    try {
      const [session, players, characters] = await Promise.all([
        getSessionById(sessionId!, token!),
        getSessionPlayers(sessionId!, token!),
        getCharacters(token!)
      ]);

      if (!session) {
        throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      setLobbyState({ session, players, characters });
      
      const player = players.find(p => p.user_id === userId);
      if (player?.character_id) {
        setSelectedCharacter(player.character_id);
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
      if (sessionId && token) {
        try {
          const ws = connectWebSocket(sessionId, token);
          wsRef.current = ws;
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
          ws.on('*', handleWebSocketMessage);
          await ws.connect();
        } catch (wsError) {
          console.error('WebSocket connection error:', wsError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ WebSocket
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ–±–±–∏:', err);
      setError(err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏');
    } finally {
      setLoading(false);
    }
  }, [sessionId, token, userId, validateParams]);

  useEffect(() => {
    loadInitialData();
    return () => {
      console.log('Component unmounted - cleaning up');
      if (sessionId) {
        disconnectWebSocket(sessionId);
      }
    };
  }, [loadInitialData, sessionId]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏–π
  const handleWebSocketMessage = (data: any) => {
    switch (data.type) {
      case 'player_joined':
        setLobbyState(prev => prev ? {
          ...prev,
          players: [...prev.players, data.data as SessionPlayer]
        } : null);
        break;

      case 'player_ready':
        setLobbyState(prev => prev ? {
          ...prev,
          players: prev.players.map(p => 
            p.id === data.data.id ? data.data : p
          )
        } : null);
        break;

      case 'game_started':
        navigate(`/game/${sessionId}`);
        break;

      default:
        console.log('Unhandled message:', data.type);
    }
  };

  const handleReadyToggle = async () => {
    if (!token || !sessionId) return;
    try {
      const updatedPlayer = await toggleReadyStatus(sessionId, token);
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setLobbyState(prev => prev ? {
        ...prev,
        players: prev.players.map(p => 
          p.user_id === userId ? updatedPlayer : p
        )
      } : null);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
    }
  };

  const handleCharacterSelect = (characterId: number) => {
    setSelectedCharacter(characterId);
  };

  const handleStartGame = async () => {
    if (!token || !sessionId) return;
    try {
      await startSession(sessionId, token);
      navigate(`/game/${sessionId}`);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
    }
  };

  if (loading) {
    return (
      <div className="lobby-container">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="lobby-container">
        <div className="error">–û—à–∏–±–∫–∞: {error}</div>
      </div>
    );
  }

  if (!lobbyState) {
    return (
      <div className="lobby-container">
        <div className="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏</div>
      </div>
    );
  }

  const currentPlayer = lobbyState.players.find(p => p.user_id === userId);
  const readyPlayers = lobbyState.players.filter(p => p.is_ready).length;
  const totalPlayers = lobbyState.players.length;
  const allPlayersReady = totalPlayers > 1 && lobbyState.players.every(p => p.is_ready);
  const isCreator = lobbyState.session.creator_id === userId;
  const readinessPercentage = totalPlayers > 0 ? (readyPlayers / totalPlayers) * 100 : 0;

  return (
    <div className="lobby-container">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ */}
      <div className="session-info-card">
        <div className="session-id">{lobbyState.session.id}</div>
        <div style={{ textAlign: 'center' }}>
          <span className={`session-status ${lobbyState.session.status}`}>
            {lobbyState.session.status === 'waiting' ? '–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤' : '–ê–∫—Ç–∏–≤–Ω–∞—è'}
          </span>
        </div>
      </div>

      <div className="lobby-content">
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="lobby-main">
          {/* –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
            <div className="character-selection">
              <h3>üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
              
              {/* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å GM */}
              {currentPlayer?.is_gm ? (
                <div style={{
                  textAlign: 'center',
                  padding: '40px',
                  background: 'rgba(255, 215, 0, 0.2)',
                  borderRadius: '12px',
                  border: '2px solid #ffd700'
                }}>
                  <div style={{ fontSize: '3rem', marginBottom: '20px' }}>üëë</div>
                  <h4 style={{ color: '#ffd700', marginBottom: '15px' }}>
                    –í—ã - Game Master (–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã)
                  </h4>
                  <p style={{ 
                    color: 'rgba(255, 255, 255, 0.8)',
                    marginBottom: '20px',
                    lineHeight: '1.6'
                  }}>
                    –ö–∞–∫ GM –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∏–≥—Ä–æ–π, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç–µ NPC.<br/>
                    –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤—Å–µ–º –º–∏—Ä–æ–º!
                  </p>
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                    gap: '15px',
                    marginTop: '20px'
                  }}>
                    <div style={{ 
                      padding: '15px',
                      background: 'rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px'
                    }}>
                      <strong style={{ color: '#4facfe' }}>üé≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π</strong>
                      <p style={{ fontSize: '0.9rem', marginTop: '5px' }}>
                        –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤
                      </p>
                    </div>
                    <div style={{ 
                      padding: '15px',
                      background: 'rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px'
                    }}>
                      <strong style={{ color: '#56ab2f' }}>üßô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NPC</strong>
                      <p style={{ fontSize: '0.9rem', marginTop: '5px' }}>
                        –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –Ω–µ–∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                      </p>
                    </div>
                    <div style={{ 
                      padding: '15px',
                      background: 'rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px'
                    }}>
                      <strong style={{ color: '#ff6b6b' }}>üìñ –ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ</strong>
                      <p style={{ fontSize: '0.9rem', marginTop: '5px' }}>
                        –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
                      </p>
                    </div>
                  </div>
                </div>
              ) : lobbyState.characters.length === 0 ? (
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                <div style={{ textAlign: 'center', padding: '40px' }}>
                  <p style={{ color: 'rgba(255, 255, 255, 0.8)', marginBottom: '20px' }}>
                    –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                  </p>
                  <button 
                    className="btn btn-primary"
                    onClick={() => navigate('/characters')}
                  >
                    ‚ú® –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                  </button>
                </div>
              ) : (
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
                <div className="character-grid">
                  {lobbyState.characters.map(character => (
                    <div
                      key={character.id}
                      className={`character-card ${
                        selectedCharacter === character.id ? 'selected' : ''
                      } ${currentPlayer?.is_ready ? 'disabled' : ''}`}
                      onClick={() => !currentPlayer?.is_ready && handleCharacterSelect(character.id)}
                    >
                      {/* –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
                    </div>
                  ))}
                </div>
              )}
            </div>
        </div>

        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <div className="lobby-sidebar">
          {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
          <div className="players-section">
            <div className="players-header">
              <h3>üë• –ò–≥—Ä–æ–∫–∏</h3>
              <div className="players-count">
                {totalPlayers}/{lobbyState.session.max_players}
              </div>
            </div>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
            <div className="readiness-indicator">
              <div className="readiness-bar">
                <div 
                  className="readiness-progress" 
                  style={{ width: `${readinessPercentage}%` }}
                />
              </div>
              <div className="readiness-text">
                –ì–æ—Ç–æ–≤–æ: {readyPlayers}/{totalPlayers}
              </div>
            </div>

            <div className="players-list">
              {lobbyState.players.map(player => {
                const character = lobbyState.characters.find(c => c.id === player.character_id);
                return (
                  <div 
                    key={player.id} 
                    className={`player-item ${
                      player.user_id === userId ? 'current' : ''
                    } ${player.is_gm ? 'gm' : ''}`}
                  >
                    <div className="player-header">
                      <div className="player-name">
                        üë§ –ò–≥—Ä–æ–∫ {player.user_id}
                        {player.is_gm && <span className="gm-badge">GM</span>}
                      </div>
                      <span className={`player-status status ${player.is_ready ? 'ready' : 'not-ready'}`}>
                        {player.is_ready ? '–ì–æ—Ç–æ–≤' : '–ù–µ –≥–æ—Ç–æ–≤'}
                      </span>
                    </div>
                    <div className="player-character">
                      {character ? (
                        <>
                          {getRaceEmoji(character.race)} {character.name} 
                          ({getClassName(character.class)})
                        </>
                      ) : (
                        '–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω'
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
        <div className="ready-section">
          {currentPlayer?.is_gm ? (
            // GM –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            <div style={{ textAlign: 'center' }}>
              <div style={{
                padding: '15px',
                background: 'rgba(255, 215, 0, 0.2)',
                borderRadius: '12px',
                border: '2px solid #ffd700'
              }}>
                <div style={{ fontSize: '1.5rem', marginBottom: '10px' }}>üëë</div>
                <div style={{ 
                  fontSize: '1.1rem',
                  fontWeight: 'bold',
                  color: '#ffd700',
                  marginBottom: '8px'
                }}>
                  Game Master –≥–æ—Ç–æ–≤
                </div>
                <div style={{ 
                  fontSize: '0.9rem',
                  color: 'rgba(255, 255, 255, 0.8)'
                }}>
                  –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
                </div>
              </div>
            </div>
          ) : (
            // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            <>
              <button
                className={`ready-button ${currentPlayer?.is_ready ? 'ready' : ''} ${
                  !selectedCharacter ? 'disabled' : ''
                }`}
                onClick={handleReadyToggle}
                disabled={!selectedCharacter}
              >
                {currentPlayer?.is_ready ? '–û—Ç–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å' : '–Ø –≥–æ—Ç–æ–≤!'}
              </button>
              
              {!selectedCharacter && (
                <div className="ready-hint">
                  –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                </div>
              )}
            </>
          )}
        </div>
            ) : (
              // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
              <>
                <button
                  className={`ready-button ${currentPlayer?.is_ready ? 'ready' : ''} ${
                    !selectedCharacter ? 'disabled' : ''
                  }`}
                  onClick={handleReadyToggle}
                  disabled={!selectedCharacter}
                >
                  {currentPlayer?.is_ready ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å' : '‚úÖ –Ø –≥–æ—Ç–æ–≤!'}
                </button>
                
                {!selectedCharacter && (
                  <div className="ready-hint">
                    –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                  </div>
                )}
              </>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –¥–ª—è GM */}
          {isCreator && (
            <button
              className="start-button"
              onClick={handleStartGame}
              disabled={!allPlayersReady}
            >
              {allPlayersReady ? '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É!' : '–ñ–¥–µ–º –∏–≥—Ä–æ–∫–æ–≤...'}
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default SessionLobby;